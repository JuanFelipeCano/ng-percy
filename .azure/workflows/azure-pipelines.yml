# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  vmImage: ubuntu-latest

# parameters:
#   - name: buildConfig
#     type: string
#     default: 'development'
#     values:
#       - production
#       - development
#       - fake

jobs:
  - job: Installing
    displayName: 'Agent Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g @angular/cli
      displayName: 'Install Angular CLI'

    - script: |
        npm install
      displayName: 'Install Project Dependencies'

    # Prepare Analysis Configuration task
    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'SonarQube Build'
        scannerMode: 'cli'
        configMode: 'manual'
        cliProjectKey: 'ng-percy'
        cliProjectName: 'ng-percy'
        cliProjectVersion: '0.0.1'
        cliSources: '.'
      continueOnError: true

    # Run Code Analysis task
    - task: SonarQubeAnalyze@7
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
      continueOnError: true

    # Publish Quality Gate Result task
    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'
      continueOnError: true

    # Run Unit test
    - script: |
        npm run test:coverage --watch=false --browsers=ChromeHeadless
      displayName: 'Run Unit Tests'
      continueOnError: false

    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage/clover.xml'
        pathToSources: '$(Build.SourcesDirectory)/coverage/lcov-report'
      displayName: 'Publish Code Coverage Results'

    - script: |
        ng build percy
      displayName: 'Build Project'
      continueOnError: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'dist/percy/'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive dist Folder'
      continueOnError: false

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifact: drop'
